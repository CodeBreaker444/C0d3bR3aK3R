I"cP<p>This is an assessment writeup so, it will be <em>LONG</em> and in-depth. These writeups are written only after a patch has been released or some of the information is not disclosed to you and only use it for educational purpose.</p>

<p>Before we get into details, there are few things to consider:</p>
<ol>
  <li>No permanent damage is done to the platform code or to the servers.</li>
  <li>This vulnerability is already patched or it doesn‚Äôt revealed here.</li>
  <li>This is not a DDOS attack and i recommend you not to do it too.</li>
  <li>This writeup doesn‚Äôt provide a step by step by instruction to hack anything but gives you the basic idea behind the approach.</li>
  <li>Last but not least this is only for educational purpose.</li>
</ol>

<h3 id="approach">Approach:</h3>
<p>This time, the approach would be different because it‚Äôs the first time i‚Äôve encountered a Generic STB(Set-Top Box) powered by android. Now let‚Äôs see what we can do!
My initial plan(This may change):</p>
<ul>
  <li>Play with the in-built settings and collect any dev(it means technical) info which can be usefull to do some naughty stuffüòé.</li>
  <li>It‚Äôs basically Android, How i know? Because of the U.I and what do you think they are going develop a new O.S like L.G webos <strong>BS</strong>. So, let‚Äôs find a way to extract the apk‚Äôs from the STB. Hmm! possible i think.</li>
  <li>It‚Äôs also an IPTV and obviously it uses IP address to stream through TCP(If they are dumb!) or UDP. If we can get the Channel specific URL‚Äôs you can watch free T.V from anywhere and from any device. We have some how capture the data without disassembling the STB(Because my mom warned me not to).
<em><u><br />Tech fact</u>: Typically live video-streaming appliances are not designed with TCP streaming in mind. If you use TCP, the OS must buffer the unacknowledged segments for every client. This is undesirable, particularly in the case of live events; presumably your list of simultaneous clients is long due to the singularity of the event. Pre-recorded video-casts typically don‚Äôt have as much of a problem with this because viewers stagger their replay activity; therefore TCP is more appropriate for replaying a video-on-demand.</em></li>
  <li>My another epic ‚ò†Ô∏è idea is to backup the whole android .img and decompile it in my P.C and analyse the hex code and reverse engineer it and then re-flash it. I know it‚Äôs pretty time consuming and analysing the code will definitely be a challange for me. We have to ready for it as the last resort.</li>
  <li>Their is a less complicated method, which is to connect the STB to my P.C using TYPE-A to TYPE-A cable. I don‚Äôt know whether i can get any data from it but if their is a failsafe mode for the STB to enable debugging. If we choose this path we have find the method to put it in the failsafe or recovery mode. Obviously a recovery mode will ber present because any device would have one, otherwise it is made by a dumbü§ì person.</li>
  <li>If none of the above will work then we will think for more approaches. Untill then let‚Äôs start excuting.</li>
</ul>

<h3 id="analysis">Analysis</h3>
<ol>
  <li>I was able to jump in the advance settings menu and successfully opened the ANDROID SETTINGS app. From there you know i was able to enable the developer options and soon i find out that their is no adb over wireless and their is no USB debugging option. So bascially it means data extraction using TYPE-A cable is not possible. <strong>FIRST BLOW-UPü§Ø</strong> Lets move on.
    <ul>
      <li>Digging in the settings app, I opened the Applications section and find some interesting system installed apps there. It‚Äôs the APSFL app, yes this app acts as the default launcher and basically it what make the IPTV as AP Fibertv. So, finally we got a lead.</li>
    </ul>
  </li>
  <li><u>Extracting the apk from stb</u>: I can‚Äôt connect to the PC so i cannot backup the apk. But what if i can use the android itself to help me backup the apk. Let me explain!
    <ul>
      <li>Fortunately our beloved manufacturer i.e Dasan Networks has installed a chrome browser to let the users browse the Internet but we can use it to download the apps too.</li>
      <li>I‚Äôve downloaded the ESfileExplorer(Obviously!) apk from the apkpure.com and i opened it and the android helped because it‚Äôs the android default behaviour to launch package installer if any app is downloaded without opening any file manager to browse the app(which is not possible in our case). Thanks Android!</li>
      <li>Created a Backup of the APSFL.apk and connected a pendrive to the USB port and copied the file to the pendrive with the help of ES Explorer(Thanks EsFileExplorer).</li>
    </ul>
  </li>
  <li>As the APSFL app acted as a launcher and controlled all the T.V operations such as Authentication, STB-menu, Streaming..etc. This is our gateway for everything.
    <ul>
      <li>Installed the apk in the emulator and opened it, To my excitement the app has authentication and data is transmistted through the HTTPS protocol (It‚Äôs encrypted!). Now checkout the below <del>vulnerability</del> vulnerabilities sectionüëáüèª.</li>
    </ul>
  </li>
</ol>

<h3 id="vulnerabilities">Vulnerabilities</h3>
<ul>
  <li><strong><u>Bypassing the encryption</u></strong>: Basically to monitor the traffic data from the app to the server has to be decrypted. Installing a custom cert will do the trick but the android api should be 23 or below. Reinstalling the Emulator with android 6.0, Setting up a proxy server to listen to the traffic has been completed. See the below authentication data.</li>
</ul>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="err">GET</span><span class="w"> </span><span class="err">/appserver/rest/</span><span class="mi">0</span><span class="err">C:</span><span class="mi">65</span><span class="err">:EE:</span><span class="mi">6</span><span class="err">E:CE:</span><span class="mi">68</span><span class="err">/login</span><span class="w"> </span><span class="err">HTTP/</span><span class="mf">1.1</span><span class="w">
</span><span class="err">Host:</span><span class="w"> </span><span class="err">iptv.apsfl.co.in:</span><span class="mi">8080</span><span class="w">
</span><span class="err">Proxy-Connection:</span><span class="w"> </span><span class="err">keep-alive</span><span class="w">
</span><span class="err">Accept:</span><span class="w"> </span><span class="err">application/json,</span><span class="w"> </span><span class="err">text/javascript,</span><span class="w"> </span><span class="err">*/*;</span><span class="w"> </span><span class="err">q=</span><span class="mf">0.01</span><span class="w">
</span><span class="err">User-Agent:</span><span class="w"> </span><span class="err">Mozilla/</span><span class="mf">5.0</span><span class="w"> </span><span class="err">(Linux;</span><span class="w"> </span><span class="err">Android</span><span class="w"> </span><span class="mf">6.0</span><span class="err">;</span><span class="w"> </span><span class="err">Samsung</span><span class="w"> </span><span class="err">Build/MRA</span><span class="mi">58</span><span class="err">K;</span><span class="w"> </span><span class="err">wv)</span><span class="w"> </span><span class="err">AppleWebKit/</span><span class="mf">537.36</span><span class="w"> </span><span class="err">(KHTML,</span><span class="w"> </span><span class="err">like</span><span class="w"> </span><span class="err">Gecko)</span><span class="w"> </span><span class="err">Version/</span><span class="mf">4.0</span><span class="w"> </span><span class="err">Chrome/</span><span class="mf">44.0</span><span class="err">.</span><span class="mf">2403.119</span><span class="w"> </span><span class="err">Mobile</span><span class="w"> </span><span class="err">Safari/</span><span class="mf">537.36</span><span class="w">
</span><span class="err">Accept-Encoding:</span><span class="w"> </span><span class="err">gzip,</span><span class="w"> </span><span class="err">deflate</span><span class="w">
</span><span class="err">Accept-Language:</span><span class="w"> </span><span class="err">en-US</span><span class="w">
</span><span class="err">X-Requested-With:</span><span class="w"> </span><span class="err">com.corpus.stb.apsfl</span><span class="w">


</span><span class="err">HTTP/</span><span class="mf">1.1</span><span class="w"> </span><span class="mi">200</span><span class="w"> 
</span><span class="err">Date:</span><span class="w"> </span><span class="err">Sun,</span><span class="w"> </span><span class="mi">29</span><span class="w"> </span><span class="err">Mar</span><span class="w"> </span><span class="mi">2020</span><span class="w"> </span><span class="mi">12</span><span class="err">:</span><span class="mi">33</span><span class="err">:</span><span class="mi">42</span><span class="w"> </span><span class="err">GMT</span><span class="w">
</span><span class="err">Set-Cookie:</span><span class="w"> </span><span class="mi">0</span><span class="err">C:</span><span class="mi">65</span><span class="err">:EE:</span><span class="mi">6</span><span class="err">E:CE:</span><span class="mi">68</span><span class="err">=</span><span class="mi">1585485222172</span><span class="w">
</span><span class="err">Vary:</span><span class="w"> </span><span class="err">Accept-Charset,</span><span class="w"> </span><span class="err">Accept-Encoding,</span><span class="w"> </span><span class="err">Accept-Language,</span><span class="w"> </span><span class="err">Accept</span><span class="w">
</span><span class="err">Accept-Ranges:</span><span class="w"> </span><span class="err">bytes</span><span class="w">
</span><span class="err">Access-Control-Allow-Origin:</span><span class="w"> </span><span class="err">*</span><span class="w">
</span><span class="err">Compressed:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span><span class="err">Server:</span><span class="w"> </span><span class="err">Noelios-Restlet-Engine/</span><span class="mf">1.1</span><span class="err">.</span><span class="mi">6</span><span class="w">
</span><span class="err">Content-Type:</span><span class="w"> </span><span class="err">text/plain;charset=ISO</span><span class="mi">-8859-1</span><span class="w">
</span><span class="err">Content-Length:</span><span class="w"> </span><span class="mi">83</span><span class="w">

</span><span class="p">{</span><span class="nl">"responseStatus"</span><span class="p">:{</span><span class="nl">"statusCode"</span><span class="p">:</span><span class="s2">"803"</span><span class="p">,</span><span class="nl">"statusMessage"</span><span class="p">:</span><span class="s2">"Device is Not Provisioned"</span><span class="p">}}</span></code></pre></figure>

<ul>
  <li>As you can see the authentication has done through the MAC address of the device which is pretty reasonable.</li>
  <li>The response is in json format and if the authentication is successfull we are served with some pretty useful data.</li>
  <li><strong><u>Spoofing the Mac Address</u></strong>: I have to get pass the authentication by spoofing my emulator which is <strong>0C:65:EE:6E:CE:68</strong>(You can see in the GET request above) with my stb MAC Id. I have changed my mac id thanks to the virtual box network interface. My initial thoughts were that once the authentication is bypassed i can play live tv from my android deviceü§∑.
    <ul>
      <li>Ofcourse without hiccups how can hacking will be challenging. The problem i faced is a weird one which is the video which is streaming is not supported by the android emulator which i was using. And believe me it‚Äôs pretty hard to find a emulator which has support for root, api 23, stable and for macü§¶‚Äç‚ôÇÔ∏è.</li>
      <li>I have experimented with various images with various architectures both arm64 and x86. By the way our STB runs on arm architecture. But i always landed in some kind of problems related to connection, mac spoofing, rooting ..etc. The problem here is that there are no required video codecs in the android img to playback the video.</li>
      <li>There are some things i have observed during this time:
        <ul>
          <li>Why can‚Äôt i capture the video stream URL‚Äôs through proxy? My raw guess is that they are using UDP protocol for multicasting which is not supported by my tool. So, i have changed the tool to wireshark and started analysing the complicated UDP packets and stitching them together(Believe me analysing UDP packets is difficult when filtering all the mac traffic too). Still, no luck <strong>SECOND BLOW-UPü§Ø</strong>.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><strong><u>Decmopiling the apk</u></strong>: Their is no other way but to reverse engineer the apk itself, started by decompiling the apk and converting the .smali resources to .java files using both fern flower and byte code decompilers at the same time.
    <ul>
      <li>First thing i have done is to modify the ConnectionManager condition to true. I have already told you that i had faced connection issues in the app in ANDROID TV emulator which does have video codecs but didn‚Äôt get pass through this connection issue. I think the problem is with android connection libraries present in the android tv image. I was sure if i can get past this i can stream the live tv there. Unfortunately there are two many connection checks and if i try to change all of the conditions it‚Äôs gonna break at some point(i mean the app will crash, unforutnately stopped).</li>
      <li>My options are limited now, i was frustrated with the lag in emulators and rooting the tv image everytime i restart as the root is non-persistance(don‚Äôt ask me why, they have not found a way to keep persistance in default android emulator). I was going through the other stuff in decompiled apk and found the assets folder.</li>
    </ul>
  </li>
  <li><strong><u>Analysing the Assets</u></strong>: It‚Äôs looking interesting in the assets folder because there are html, js, css files and i have opened the index.html file in the browser and the whole APSFL layout opened in the browser and checking console logs which are huge. There is a gut feeling in me, i think we can crack it.
    <ul>
      <li>The working is simple, The authentication part is done by the android and the layouts, streaming are handled by the web part. They share data between them using some off-the-shelf library known as <strong>TornadoApp</strong>(weird name).</li>
      <li>So the operation are all handled by javascript file named as ‚Äúap_fiber_stb.min.js‚Äù which is freaking 1.5 mb in size and it is 41,000 lines long. Anyways i started analysing the .js file, man! it‚Äôs big. At last i have found out that it‚Äôs deeply integrated with the android library and their is nothing i can do <strong>THIRD BLOW-UPü§Ø</strong>.</li>
    </ul>
  </li>
  <li><strong><u>Java Script Time</u></strong>: In the browser i have observer that the js file has console logs everywhere. Another idea strike my mind, I can monitors this logs in realtime in android emulator by using a simple app known as <strong>lOGCAT</strong>.
    <ul>
      <li>Basically app specific logs are blocked in a production apk, but the javascript present in the app is handled by the android webview, which by default omits the console logs. I analysed those logs and finally i managed to find a UDP url starting with <em>udp@//ipaddress</em>. I traced it back to the origin and found the file(json) which has all the url‚Äôs of every channel present in the file. <strong>ü§©JACKPOTü§©</strong></li>
    </ul>
  </li>
</ul>

<h3 id="collecting-the-urls">Collecting the URL‚Äôs</h3>
<p>The json file has so much information and it makes sense that it is 1mb(The file with 1mb size in terms of coding is considered huge). I have filter the json data to only show URL‚Äôs and Channel names. Below is the code.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">json</span>
<span class="nb">file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">"testfile.txt"</span><span class="p">,</span><span class="s">"w"</span><span class="p">)</span>
<span class="nb">file</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">"Channel Name </span><span class="se">\t\t</span><span class="s"> ChannelUrl"</span><span class="o">+</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">'chan.json'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
  <span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">"Channel"</span><span class="p">])):</span>
      <span class="n">tmp</span><span class="o">=</span><span class="nb">str</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">"Channel"</span><span class="p">][</span><span class="n">i</span><span class="p">][</span><span class="s">"name"</span><span class="p">])</span>
      <span class="n">tmp2</span><span class="o">=</span><span class="nb">str</span><span class="p">(</span><span class="s">"  :  "</span><span class="p">)</span>
      <span class="n">tmp1</span><span class="o">=</span><span class="nb">str</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">"Channel"</span><span class="p">][</span><span class="n">i</span><span class="p">][</span><span class="s">"streamProfile"</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s">"urltype"</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s">"value"</span><span class="p">])</span>
      <span class="n">tmp3</span><span class="o">=</span><span class="n">tmp</span><span class="o">+</span><span class="n">tmp2</span><span class="o">+</span><span class="n">tmp1</span>
      <span class="nb">file</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="o">+</span><span class="n">tmp3</span><span class="o">+</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>
<span class="nb">file</span><span class="o">.</span><span class="n">close</span><span class="p">()</span></code></pre></figure>

<h3 id="result">Result</h3>
<p>I can watch all the channels from my android device using <strong>MX PLAYER</strong> OR <strong>VLC</strong>.</p>
<ol>
  <li>Open VLC or MX PLAYER.</li>
  <li>Select the network stream option.</li>
  <li>Paste The Below URL‚Äôs.
 <code class="highlighter-rouge">I DIDN'T REVEAL SOME VULNERABILITIES PRESENT IN THERE WEB PLATFORM BECAUSE I WAS WAITING FOR THEM TO FIX BEFORE I REVEAL ANYTHING. MAY BE IN FUTURE ASSESSMENT WRITEUP. THESE URL's I HAVE LEAKED ARE BASICALLY USELESS TO THE PEOPLE WHO ARE OUTSIDE THE NETWORK OF APSFL FIBERNET WIFI OR WIRED CONNECT(YES THEY ARE LOCAL ONLY AND DON'T BLAME ME! THE DESIGN ITSELF IS LIKE THAT. IT'S EFFICIENT IN THIS). I THINK IT'S LEGAL TO WATCH THESE ON YOUR MOBILE AS LONG AS YOU OWN APFIBER IPTV STB.</code></li>
</ol>

<p>Finally, NÃ∂0Ã∂ SÃ∂yÃ∂5Ã∂tÃ∂3Ã∂mÃ∂ 1Ã∂sÃ∂ SÃ∂@fÃ∂3Ã∂ dot!</p>

<p>üìéüìéPOH‚Äôs Attached below</p>

<p>üìÑùí©‚Ñ¥ùìâ‚ÑØ: Assessment of commercial companies requires a certification such as Certified Ethical Hacker(Not limited to CEH) but for personal tests not at all needed, go ahead. There are so many things i have not listed because the more you go the more it comes visible in this path. Find your own way and your own approach. Happy Hacking!!!!</p>

<p>MISSYOU TOOL: Github(<a href="https://github.com/CodeBreaker444/MissYou-A-tool-to-bruteforce-4-digit-pin-OTP-using-API-endpoints">link</a>)</p>

<p><img src="/images/2019-08-01-How-i-hacked-heartynote-1.png" alt="" /></p>
:ET